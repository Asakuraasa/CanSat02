---想定使用用途---
大会本番でスタートからゴールまで機体を移動させる

注意！！！　DistanceAzuimuth.pyにゴールの緯度経度を記入する
注意！！！　磁気偏角は地域によって異なるので8行目のdeclinationの値を変更する（種子島は7.2）

---主な機能---
スタートからゴールまで機体を移動させる
csvファイル形式でログを残す
地上局にどのような段階になっているのかメッセージを送る

＜機体から地上局に送られるメッセージについて＞
start main.py：
main.pyが正常に実行されたことを地上局側に伝える

landing now：
9軸センサの加速度値が着地した値を出す or ラズパイ起動後20分経過（時間は変わる可能性あり）した場合着地判定を行い、それを地上局に知らせるメッセージ

fusing circuit start(carrier)：
キャリア開閉用の溶断回路を動かすフェーズにきたのを地上局に送るメッセージ

fusing circuit end(carrier)：
キャリア開閉用の溶断回路を停止させたことを地上局に送るメッセージ

angle adjustment start：
ゴールと機体の正面が一直線になるように機体の角度を調節する処理を始めるということを地上局に伝えるメッセージ

angle adjustment finish：
ゴールと機体の正面が一直線になるように機体の角度を調節する処理を終えることを機体から地上局に伝えるメッセージ

manual operation start：
自動運転モードから手動運転モードに切り替えたことを地上局に知らせるメッセージ

Wrong character. Send the correct letters.：
手動運転モードで想定されているコマンド以外の文字が送信された場合に地上局に送られるメッセージ

fusing circuit start(soil moisture)：
土壌水分センサ用バネの溶断回路を動かすフェーズにきたのを地上局に送るメッセージ

fusing circuit end(soil moisture)：
土壌水分センサ用バネの溶断回路を停止させたことを地上局に送るメッセージ

soil moisture start：
土壌水分センサが動くことを知らせるメッセージ

goal now：
全ての処理が完了したことを知らせるメッセージ


＜地上局から機体に送るコマンド一覧＞
landing:
地上局に送られてきた9軸センサの加速度値をみて着地を確認し、コマンドを機体に送ることで着地判定を行う

w：
手動運転モードで3秒間直進する

d：
手動運転モードで3秒間右旋回する

a：
手動運転モードで3秒間左旋回する

s：
手動運転モードで3秒間後退する

end：
手動運転モード終了


---簡単な処理の流れ（各種コマンドやメッセージの詳しい説明については主な機能に書かれている）---

準備１．DistanceAzuimuth.pyにゴールの緯度経度を記入する
準備２．磁気偏角は地域によって異なるので8行目のdeclinationの値を変更する（種子島は7.2）
    　　0度が地図上の北を示していない場合はdeclinationの値を調節する（磁気偏角については下の文章を読む）
準備３．ラズパイの電源を入れると自動的に実行されるようにする 

０．「start main.py」というコマンドが地上局に送られてきたらmain.pyが正常に実行されたという意味
１．地上局で9軸の加速度値を読み、変化がなくなったら「landing」というコマンドを機体に送信する。
２．１で送信したコマンドが機体に届くと、「landing now」というメッセージが地上局に送信される
３．「fusing circuit start(carrier)」というメッセージを地上局に送り、キャリア開閉用の溶断回路を動かされ「fusing circuit end(carrier)」というメッセージでキャリア開閉用の溶断回路を停止させたということを地上局に伝える
４．Camera.pyを動かし、写真を地上局に送る
５．「angle adjustment start」というメッセージでゴールと機体の正面が一直線になるように機体の角度を調節する処理を行うことを地上局に伝え、「angle adjustment finish」というメッセージで処理が終えたことを伝える（OSErrerが発生した場合ManualMain.pyで手動運転モードにする）
６．直進させる
７．障害物から30cm以内orゴールから30cm以内になるまで直進を続ける（OSErrerが発生した場合ManualMain.pyで手動運転モードにする）
８．７の条件がYesだったら機体を停止させる
９．「manual operation start」というメッセージを地上局に送り、手動運転に切り替えることを知らせる
１０．Camera.pyを動かし、写真を地上局に送る
１１．機体が地上局から「end」というコマンドを受け取った場合「manual operation finish」を地上局に送信し、手動運転を終了する
    　機体が「w」というコマンドを受け取った場合、機体を3秒間直進させる
    　機体が「d」というコマンドを受け取った場合、機体を右旋回させる
    　機体が「a」というコマンドを受け取った場合、機体を左旋回させる
    　機体が「s」というコマンドを受け取った場合、機体を3秒間後退させる
    　機体が上記のコマンド以外を受け取った場合、「Wrong character. Send the correct letters.」と地上局に送信する
    　（上の処理を「end」と受け取るまで繰り返す）
１２．ゴールとの直線距離が30㎝以下になるまで４～１２を繰り返す（OSErrerが発生した場合ManualMain.pyで手動運転モードにする）
１３．「fusing circuit start(soil moisture)」というメッセージを地上局に送り、土壌水分センサ用バネの溶断回路を動かされ「fusing circuit end(soil moisture)」というメッセージで土壌水分センサ用バネの溶断回路を停止させたということを地上局に伝える
　　　（OSErrerが発生した場合ManualMain.pyで手動運転モードにする）
１４．地上局に「soil moisture start」とメッセージを地上局に送り、土壌水分センサを動かすことを知らせる
１５．水分土壌センサを動かし、その結果の値を地上局に送信する
１６．Camera.pyを動かし、写真を地上局に送る
１７．機体から「goal now」と地上局に送り、全ての処理が完了したことを伝える


xbeeについて
ポート設定　PORT = '/dev/ttyUSB0'      
通信レート設定 BAUD_RATE = 9600

---必須ライブラリ---
以下ソースファイルをmain.pyと同じディレクトリに用意する

Camera.py               カメラモジュール
NineAxisSensor.py       9軸センサ
DistanceAzimuth.py      GPSからゴールとの直線距離と方位角を求める
Distance.py             超音波距離センサ
SoilMoisture.py         土壌水分センサ
ManualMain.py           エラー発生時に手動運転モードに切り替えてミッションを完遂させる

serialの導入方法（Xbee）
pip3 install pyserial　を実行することでpyserialがインストールできる。

serialの導入方法（GPS）
「sudo raspi-config」　を打ち込み、シリアルを有効にする
「ls /dev/se*」　を打ち込み、/dev/serial0 /dev/serial1　と出力されることを確認
「cat /boot/cmdline.txt」　を入力し、エディターで「console=serial0,115200」を削除しリブートすることでcmdline.txtを修正し、serial0をコンソールとして使わないように設定する。
「sudo apt-get install python-serial」　を入力し、シリアルモジュールをインストールする

opencvの導入方法
sudo apt-get install python-opencv
または　pip install opencv-python　よりインストールする。
依存関係のあるライブラリをインストールする。
sudo apt-get install libhdf5-dev libhdf5-serial-dev libhdf5-100
sudo apt-get install libqtgui4 libqtwebkit4 libqt4-test python3-pyqt5
sudo apt-get install libatlas-base-dev
sudo apt-get install libjasper-dev
他にnumpyのバージョンが古いとうまくいかないのでアプデを行うこと。
sudo pip3 install -U numpy

numpyの導入方法
pip3 install numpy

電流センサを使うためのライブラリ
sudo pip3 install pi-ina219

I2Cの有効
sudo raspi-config

smbusの導入方法
#ダウンロードする9軸を動かすためのライブラリを使用するには、sudo apt-get install python3-smbusを実行し、smbusをインストールする必要があります。
また、sudo raspi-configから、Interface Optionを選択し、I2Cから、「はい」または「Yes」をEnterで確定して、I2C通信を有効にする必要があります。
※確定後の再起動は必要ありません。

micropyGPSの導入方法
micropyGPSは以下のサイトからファイルをダウンロードし、gps.pyが入っているディレクトリに移す
https://github.com/inmcm/micropyGPS


---参考にしたサイト---
gpsと距離センサのプログラムについては以下の通り
https://ambidata.io/blog/2017/08/02/gps/
https://s-design-tokyo.com/use-hcsr04/


---GPSセンサ　AE-GYSFDMAXB---
取扱説明書
chrome-extension://efaidnbmnnnibpcajpcglclefindmkaj/https://akizukidenshi.com/download/ds/akizuki/AE-GPS_manual_r1.06_s.pdf
秋月のリンク
https://akizukidenshi.com/catalog/g/gK-09991/

---超音波センサー　HC-SR04---
秋月のリンク
https://akizukidenshi.com/catalog/g/gM-11009/


---磁気偏角についての説明（ChatGPT）---
一般的に、地磁気センサーの補正後の方位角の0度は、地理的な北を向いている状態を表します。
ただし、方位角の0度が地理的な北と一致するかどうかは、地域によって異なります。
これは、地球の磁場が地球表面上で一様ではなく、地域によって磁力線の傾きが異なるためです。
したがって、地域によっては、磁気偏角を考慮しても、補正後の方位角の0度が地理的な北と一致しない場合があります。
そのため、方位角の値を地図上の方向に合わせて調整する必要があります。


